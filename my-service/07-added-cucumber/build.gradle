plugins {
  id 'com.adarshr.test-logger' version '3.2.0'
  id 'com.diffplug.spotless' version '6.4.2'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.7.0'
  id 'org.sonarqube' version '3.1.1'
  id 'jacoco'
  id 'java'
}

group 'com.mingyuchoo'
version '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
  cucumberRuntime {
    extendsFrom testImplementation
  }
}
repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  annotationProcessor 'org.projectlombok:lombok'
  compileOnly 'org.projectlombok:lombok'
  runtimeOnly 'com.h2database:h2'
  testImplementation ('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
  testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
  testImplementation 'io.cucumber:cucumber-java:6.9.1'
  testImplementation 'io.cucumber:cucumber-junit:6.9.1'
  testImplementation 'io.cucumber:cucumber-spring:6.9.1'
}

jacoco {
  toolVersion = '0.8.8'
}

jacocoTestReport {
  reports {
    xml.required = false
    csv.required = false
    html.outputLocation = layout.buildDirectory.dir('reports/tests/jacoco')
  }
  dependsOn test
}

sonarqube {
  properties {
    property 'sonar.sourceEncoding', 'UTF-8'
  }
}

spotless {
  java {
    importOrder()
    removeUnusedImports()
    googleJavaFormat('1.7').aosp()
    indentWithSpaces(4)
    trimTrailingWhitespace()
    endWithNewline()
  }
  groovyGradle {
    target '**/*.gradle'
    greclipse().configFile('greclipse.properties')
    endWithNewline()
    indentWithSpaces(2)
    trimTrailingWhitespace()
  }
  format 'misc', {
    target '**/*.gradle', '**/*.yaml', '**/*.yml', '**/*.md', '**/.gitignore'
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
}

task cucumber() {
  dependsOn assemble, testClasses
  doLast {
    javaexec {
      main = 'io.cucumber.core.cli.Main'
      classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
      args = [
        '--plugin',
        'pretty',
        '--glue',
        'com.mingyuchoo.demo',
        'src/test/resources'
      ]
    }
  }
}

testlogger {
  theme 'plain'
  showExceptions true
  showStackTraces true
  showFullStackTraces false
  showCauses true
  slowThreshold 2000
  showSummary true
  showSimpleNames false
  showPassed true
  showSkipped true
  showFailed true
  showOnlySlow false
  showStandardStreams false
  showPassedStandardStreams true
  showSkippedStandardStreams true
  showFailedStandardStreams true
  logLevel 'lifecycle'
}

test {
  // dependsOn 'spotlessApply'
  useJUnitPlatform()
  testlogger
  jacoco {
    enabled = true
    destinationFile = layout.buildDirectory.file('test-results/jacoco/jacocoTest.exec').get().asFile
  }
  finalizedBy jacocoTestReport
}
